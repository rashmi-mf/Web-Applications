<html>
 <head>
 <title>TaskList</title>
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
  text-align : left;
}

input[type=text], select {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

</style>
<script src="moment.min.js"></script>
 </head>
 <script>
	window.onload = function() {
		if(localStorage.getItem('taskList') == null) {
			var httpRequest = new XMLHttpRequest();
			httpRequest.onreadystatechange = function() {
				if(httpRequest.readyState == 4 && httpRequest.status == 200) {
					var taskList = JSON.parse(httpRequest.response);
					taskList = taskList.tasksList;
					var fulllist = [];
					for (var i = 0 ; i < taskList.length ; i++){
						var listName = taskList[i].listName;
						var tasks = taskList[i].todos;
						tasks.forEach(function(item) { 
							item["listName"] =  listName;
							if(item.assignee != null) {
								item["name"] = item.assignee.name;
								item["avatar"] = item.assignee.avatar;
							}
							else {
								item["name"] = null
								item["avatar"] = null;
							}
							delete item.assignee;
						});
						fulllist = fulllist.concat(tasks)
					}
					localStorage.setItem('taskList', JSON.stringify(fulllist));
				}
			}
			httpRequest.open("POST", "http://localhost:1337/demo.klevu.com/js-assignment/taskslists.json", true);
			httpRequest.withCredentials = false;
			httpRequest.send();
		}
	}
	function generateTable(list) {
		if(list != null) 
			var localTaskList = list;
		else
			var localTaskList = JSON.parse(localStorage.getItem('taskList'));
		var col = [];
		for (var i = 0 ; i < localTaskList.length ; i++) {
			for(var key in localTaskList[i]){
				if(col.indexOf(key) == -1)
					col.push(key);
			}
			table = document.createElement("table");
			tr = table.insertRow(-1);
		}
		
		for(var i = 0 ; i < col.length ; i++){
			var th = document.createElement('th');
			th.innerHTML = col[i];
			tr.appendChild(th);
		}
		
		for (var i = 0; i < localTaskList.length; i++) {
            tr = table.insertRow(-1);
            for (var j = 0; j < col.length; j++) {
                var tabCell = tr.insertCell(-1);
				tabCell.innerHTML = localTaskList[i][col[j]];
				if(tabCell.innerHTML.includes("png")) {
					tabCell.innerHTML = "<img src = " + tabCell.innerHTML  + ">"
				}
            }
        }

        var divContainer = document.getElementById("taskListTable");
        divContainer.innerHTML = "";
        divContainer.appendChild(table);
		document.getElementById("taskListTable").style.visibility = "visible";
	}
	
	function setStatus() {
			var date = document.getElementById('datePicker').value;
			var listName = document.getElementById('list').value;
			if(listName == "") {
				window.alert("Please enter list name");
				return;
			}
			var localTaskList = JSON.parse(localStorage.getItem('taskList'));
			for(var i = 0 ; i < localTaskList.length ; i++) {
				if(localTaskList[i].listName == listName) {
					var dueDate = localTaskList[i].dueDate;
					if(moment(dueDate, 'DD-MM-YYYY').format('DD-MM-YYYY') < moment(date, 'YYYY-MM-DD').format('DD-MM-YYYY'))
						localTaskList[i].status = "completed";
					}
			}
			localStorage.setItem('taskList', JSON.stringify(localTaskList));
			generateTable();
	}
	
	function sort() {
		var status = document.getElementById('status').value;
		var listName = document.getElementById('listName').value;
		if(status == "" || listName == "") {
				window.alert("Status and List should not be empty");
				return;
			}
		var localTaskList = JSON.parse(localStorage.getItem('taskList'));
		var filteredList = localTaskList.filter(function(item) {
			return (item.status == status && item.listName == listName);
		});
		
		filteredList.sort(function(left, right) {
			if (moment(left, 'MM/DD/YYYY') > moment(right, 'MM/DD/YYYY'))
				return 1;
		});
		if(filteredList != null && filteredList.length > 0)
			generateTable(filteredList);
		else
			document.getElementById("taskListTable").style.visibility = "hidden";
	}
 </script>
 <body>
 <b>Generate table : </b><br><button type="button" value = "Generate Table" onclick= "generateTable()">Generate Table</button><br><br><br><br>
	<b>List Name :</b> <select id = "list">
	<option value="">Select</option>
    <option value="Before Travelling">Before Travelling</option>
    <option value="To Buy">To Buy</option>
  </select>
  <b>Due Date :</b><br><input type="date" id = "datePicker" value = "2019-05-26"><br><br>
  <button type="button " onclick = "setStatus()">Set Status</button><br><br><br><br><br>
  <b>Status :</b><select id = "status">
	<option value="">Select</option>
    <option value="pending">Pending</option>
    <option value="completed">Completed</option>
  </select>
  <b>List Name :</b><select id = "listName">
	<option value="">Select</option>
    <option value="Before Travelling">Before Travelling</option>
    <option value="To Buy">To Buy</option>
  </select>
 <button type="button" onclick = "sort()">Sort</button><br><br><br>
 <div>
    <table id="taskListTable"></table>
</div>
 </body>
</html>